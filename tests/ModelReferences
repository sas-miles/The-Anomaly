
/*
This script is a template for creating a new model reference.
*/

//Consturctor
this.experience = new Experience()
this.scene = this.experience.scene
this.resources = this.experience.resources

this.resource = this.resources.items.NameOfModelInSources
this.setModel()

// Method
setModel() {
        this.model = this.resource.scene
        this.scene.add(this.model)
        
    }




/*
This script finds meshes by name and applies a new material to them.
Specify name of objects in Blender.
*/

//Constructor
this.setCustomMaterial()

setCustomMaterial() {
    if (!this.model) {
        console.error('Model not loaded')
        return
    }

    const targetNames = ["MeshName1", "MeshName2", "MeshName3"];

    this.model.traverse((child) => {
        if (child.isMesh && targetNames.includes(child.name)) {
            child.material = new THREE.MeshStandardMaterial({
                // Add material properties here
            });
        }
    });

}


/*
This script shows how to access a singleton of a model in another class.
*/

/* In the class where the model is created, convert it to a singleton.
*/

//Constructor
if (modelClassName.instance) {
    return modelClassName.instance;
}

modelClassName.instance = this;

/* 
In the class where you want to access the model, import the class and access the model.
Ensure models are created as singletons and is accessed after the resources are ready.
*/

//Constructor
this.modelClassName = modelClassName.instance


/* This script applies the same shader material for multiple models.
*/

//Constructor
this.model1Name = model1Name.instance
this.model2Name = model2Name.instance

this.modelGroup = [
    this.model1Name.model,
    this.model2Name.model
]

this.setModelGroupMaterial

setModelGroupMaterial() {
    // Function to apply shader material to a mesh
    const applyShader = (mesh) => {
        mesh.material = new THREE.ShaderMaterial({
            vertexShader: shaderNameVertex,
            fragmentShader: shaderNameFragment
        });
    };

    // Apply shader to each model in the list
    this.modelGroup.forEach(model => {
        model.traverse((child) => {
            if (child.isMesh) {
                applyShader(child);
            }
        });
    });
}