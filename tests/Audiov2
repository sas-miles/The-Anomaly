import * as THREE from "three";
import Experience from "../Experience";
export default class AudioManager {
    constructor() {
        this.experience = new Experience();
        this.resources = this.experience.resources;
        this.camera = this.experience.camera.instance;
        this.audioLoader = new THREE.AudioLoader();

        this.soundEnabled = false

        this.audioFiles = {
            'home': this.experience.resources.items.IntroAudio,
            'intro': this.experience.resources.items.IntroAudio,
            'chapter1': this.experience.resources.items.Chapter1Audio,
            'chapter2': this.experience.resources.items.Chapter2Audio,
        };

        
        this.isPlaying = false;
        this.currentSound = null;
        this.listeners = [];

        this.setupEventDelegation()
        this.bindButtonEvents()

        
    }

    setupEventDelegation() {
        document.addEventListener('click', (event) => {
            // If the clicked element doesn't have the right selector, bail
            if (!event.target.matches('.play-sound, .stop-sound')) return;
    
            // Don't follow the link
            // event.preventDefault();
    
            // Determine the namespace from the element's classList
            const namespace = Array.from(event.target.classList).find(cls => cls !== 'play-sound' && cls !== 'stop-sound');
    
            // Call the appropriate function
            if (event.target.matches('.play-sound')) {
                this.playSound(namespace);
            } else if (event.target.matches('.stop-sound')) {
                this.stopSound(namespace);
            }
        }, false);
    }

    setCurrentNamespace(namespace) {
        this.currentNamespace = namespace;
    }

    bindButtonEvents(namespace) {
        console.log('From AM: Current namespace:', namespace);

    const playIntroButton = document.querySelector('.play-sound.is-intro');
    const stopIntroButton = document.querySelector('.stop-sound.is-intro');

    if (playIntroButton) {
        playIntroButton.addEventListener('click', () => {
            this.soundEnabled = true;
            this.updateGlobalSoundState();
            // Show the stop button
            const stopIntroButton = document.querySelector('.stop-sound.is-intro');
            if (stopIntroButton) stopIntroButton.style.display = 'block';
            // Navigate to the intro view...
        });
    }

    if (stopIntroButton) {
        stopIntroButton.addEventListener('click', () => {
            this.soundEnabled = false;
            this.updateGlobalSoundState();
            // Hide the stop button
            stopIntroButton.style.display = 'none';
            // Navigate to the intro view...
        });
    }

     // Bind listeners for the buttons in the given namespace
     const playButton = document.querySelector(`.${namespace} .sound-button_on`);
     const stopButton = document.querySelector(`.${namespace} .sound-button_off`);
    
     const playListener = () => {
        this.soundEnabled = true;
        this.updateGlobalSoundState();
    };

    const stopListener = () => {
        this.soundEnabled = false;
        this.updateGlobalSoundState();
    };


     if (playButton) {
         playButton.addEventListener('click', () => {
            console.log('playButton clicked');
            this.listeners.push({ element: playButton, type: 'click', listener: playListener });
            console.log(`Added play listener to ${namespace} playButton`);

         });
     }
 
     if (stopButton) {
         stopButton.addEventListener('click', () => {
            console.log('stopButton clicked');
            this.listeners.push({ element: stopButton, type: 'click', listener: stopListener });
            console.log(`Added stop listener to ${namespace} stopButton`);

         });
     }

     console.log('playButton:', playButton);
    console.log('stopButton:', stopButton);
  }

    
    playSound(namespace) {
        // Immediately update UI to reflect action intention
        this.updateSoundButtonState(true); // Assume playing
        if (!this.soundEnabled) return;
    
        const sound = this.audioFiles[namespace];
        if (sound) {
            if (this.currentSound) {
                this.currentSound.stop();
            }
            sound.play();
            this.isPlaying = true;
            this.currentSound = sound;
            this.currentNamespace = namespace;

        } else {
            // If sound not found or failed to play, revert UI state
            this.updateSoundButtonState(false);
        }
    }
    
    stopSound(namespace) {
        if (this.currentSound && this.currentNamespace === namespace) {
            this.currentSound.stop();
        }
        this.isPlaying = false;
        this.currentSound = null;
        this.updateSoundButtonState(); // Reflect this change immediately in UI
    }

    updateGlobalSoundState() {
        console.log('updateGlobalSoundState called');
    
        // Update UI buttons first based on soundEnabled state
        const playButton = document.querySelector('.play-sound.sound-button_on');
        const stopButton = document.querySelector('.stop-sound.sound-button_off');
    
        if (this.soundEnabled) {
            // Sound is enabled
            if (playButton) playButton.style.display = 'none';
            if (stopButton) stopButton.style.display = 'block';
        } else {
            // Sound is disabled
            if (playButton) playButton.style.display = 'block';
            if (stopButton) stopButton.style.display = 'none';
            if (this.currentSound && this.isPlaying) {
                // Stop the current sound if it's playing
                this.currentSound.stop();
                this.isPlaying = false;
                this.currentSound = null;
            }
        }
    }

    transitionAudio(newNamespace) {
        console.log(`Transitioning audio for namespace: ${newNamespace}`);
        const newSound = this.audioFiles[newNamespace];
        if (newSound) {
            // If there is a currently playing sound, stop it
            if (this.currentSound) {
                this.currentSound.stop();
            }
    
            // If sound is enabled, start the new sound
            if (this.soundEnabled) {
                newSound.play();
                this.isPlaying = true;
                this.currentSound = newSound;
            } else {
                this.isPlaying = false;
                this.currentSound = null;
            }
        }
        this.updateSoundButtonState();
        this.bindButtonEvents(newNamespace); // Update button visibility based on audio state
    }

    updateButtonVisibility() {
        console.log('updateButtonVisibility called');
        const isPlaying = this.isPlaying;
        const playButton = document.querySelector('.play-sound.sound-button_on');
        const stopButton = document.querySelector('.stop-sound.sound-button_off');
        const playIntroButton = document.querySelector('.play-sound.is-intro');
        const stopIntroButton = document.querySelector('.stop-sound.is-intro');
    
        if (playButton && stopButton) {
            playButton.style.display = isPlaying ? 'none' : 'block';
            stopButton.style.display = isPlaying ? 'block' : 'none';
        }
    
        // Always display the intro stop button
        if (stopIntroButton) {
            stopIntroButton.style.display = 'block';
        }
    }
    
    updateSoundButtonState(isPlaying = this.isPlaying) {
        const playButton = document.querySelector('.play-sound.sound-button_on');
        const stopButton = document.querySelector('.stop-sound.sound-button_off');
        const playIntroButton = document.querySelector('.play-sound.is-intro');
        const stopIntroButton = document.querySelector('.stop-sound.is-intro');
    
        if (isPlaying) {
            playButton.style.display = 'none';
            stopButton.style.display = 'block';
        } else {
            playButton.style.display = 'block';
            stopButton.style.display = 'none';
        }
    
        // Always display the intro stop button
        if (stopIntroButton) {
            stopIntroButton.style.display = 'block';
        }
    }

    async rebindEventListeners(namespace) {
        // First, clean up existing listeners to prevent duplication
        await this.waitForElements(namespace)
        this.cleanupListeners();
        this.setupEventDelegation(); 
        this.bindButtonEvents(namespace);
    
        console.log(`Event listeners re-bound for namespace: ${namespace}.`);
    }

    waitForElements(namespace) {
        return new Promise((resolve) => {
            const checkExist = setInterval(() => {
                const playButton = document.querySelector(`.${namespace} .sound-button_on`);
                const stopButton = document.querySelector(`.${namespace} .sound-button_off`);
                if (playButton && stopButton) {
                    console.log('Elements are now present.');
                    clearInterval(checkExist);
                    resolve();
                }
            }, 100); // check every 100ms
        });
    }

    cleanupListeners() {
        this.listeners.forEach(({ element, type, listener }) => {
            element.removeEventListener(type, listener);
            console.log(`Removed ${type} listener from element`, element);

        });
    
        // Clear the array after cleaning up
        this.listeners = [];
        console.log('All listeners cleaned up.');

    }
    
    
}
